name: Optimize images

on:
  push:
    paths:
      - "images/**"
      - ".github/workflows/image-optimizer.yml"
  pull_request:
    paths:
      - "images/**"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  optimize:
    runs-on: ubuntu-latest

    env:
      IMAGE_DIRS: "images"
      # Target widths for responsive variants
      SIZES: "480 960 1440 1920"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Squoosh CLI
        run: npm i -g @squoosh/cli

      - name: Optimize and generate variants
        id: optimize
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob

          CHANGED=0

          for DIR in $IMAGE_DIRS; do
            [ -d "$DIR" ] || continue
            echo "Processing dir: $DIR"

            for SRC in "$DIR"/**/*.{jpg,jpeg,png,JPG,JPEG,PNG}; do
              [ -f "$SRC" ] || continue

              DIRNAME="$(dirname "$SRC")"
              FILENAME="$(basename "$SRC")"      # e.g. photo.jpg
              NAME="${FILENAME%.*}"              # e.g. photo
              EXTLC="$(echo "${SRC##*.}" | tr '[:upper:]' '[:lower:]')"

              # temp output dir to avoid clobbering
              OUTDIR="$DIRNAME/.squoosh-out"
              mkdir -p "$OUTDIR"

              # 1) Recompress original (keeps same format)
              if [[ "$EXTLC" == "jpg" || "$EXTLC" == "jpeg" ]]; then
                # input FIRST, then options
                npx --yes @squoosh/cli "$SRC" --mozjpeg '{}' --output-dir "$OUTDIR"
                if [ -f "$OUTDIR/$NAME.jpg" ]; then
                  mv "$OUTDIR/$NAME.jpg" "$SRC"
                  CHANGED=1
                fi
              elif [[ "$EXTLC" == "png" ]]; then
                npx --yes @squoosh/cli "$SRC" --oxipng '{}' --output-dir "$OUTDIR"
                if [ -f "$OUTDIR/$NAME.png" ]; then
                  mv "$OUTDIR/$NAME.png" "$SRC"
                  CHANGED=1
                fi
              fi

              # 2) Generate responsive WebP & AVIF with width suffixes
              for W in $SIZES; do
                OUT_WEBP="$DIRNAME/${NAME}-${W}.webp"
                OUT_AVIF="$DIRNAME/${NAME}-${W}.avif"

                # Create missing variants (both formats at once with --suffix)
                if [ ! -f "$OUT_WEBP" ] || [ ! -f "$OUT_AVIF" ]; then
                  npx --yes @squoosh/cli "$SRC" \
                    --resize "{\"width\":$W}" \
                    --webp "{}" \
                    --avif "{}" \
                    --suffix "-$W" \
                    --output-dir "$OUTDIR"
                fi

                if [ ! -f "$OUT_WEBP" ] && [ -f "$OUTDIR/${NAME}-${W}.webp" ]; then
                  mv "$OUTDIR/${NAME}-${W}.webp" "$OUT_WEBP"
                  CHANGED=1
                fi
                if [ ! -f "$OUT_AVIF" ] && [ -f "$OUTDIR/${NAME}-${W}.avif" ]; then
                  mv "$OUTDIR/${NAME}-${W}.avif" "$OUT_AVIF"
                  CHANGED=1
                fi
              done

              # cleanup temp dir if empty
              rmdir "$OUTDIR" 2>/dev/null || true
            done
          done

          echo "changed=$CHANGED" >> "$GITHUB_OUTPUT"

      - name: Commit optimized images
        if: steps.optimize.outputs.changed == '1'
        uses: EndBug/add-and-commit@v9
        with:
          add: "."
          message: "chore(images): optimize & generate responsive variants [skip ci]"
          default_author: github_actions
