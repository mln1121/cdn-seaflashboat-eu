name: Optimize images

on:
  push:
    paths:
      - "images/**"
      - ".github/workflows/image-optimizer.yml"
  pull_request:
    paths:
      - "images/**"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  optimize:
    runs-on: ubuntu-latest

    env:
      IMAGE_DIRS: "images"
      SIZES: "480 960 1440 1920"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: |
          npm init -y >/dev/null 2>&1 || true
          npm i sharp@^0.33.0 globby@^14.0.1

      - name: Optimize and generate variants
        id: optimize
        run: |
          node - <<'NODE'
          import { globby } from 'globby';
          import sharp from 'sharp';
          import fs from 'node:fs/promises';
          import path from 'node:path';

          const IMAGE_DIRS = (process.env.IMAGE_DIRS || '').split(/\s+/).filter(Boolean);
          const SIZES = (process.env.SIZES || '480 960 1440 1920').split(/\s+/).map(s => parseInt(s,10)).filter(Boolean);

          let changed = 0;

          const exists = async p => !!(await fs.stat(p).catch(()=>null));

          const recompressOriginal = async (src) => {
            const ext = path.extname(src).toLowerCase();
            const tmp = src + '.tmp';
            const img = sharp(src, { failOn: 'none' });

            if (ext === '.jpg' || ext === '.jpeg') {
              await img.jpeg({ quality: 80, mozjpeg: true }).toFile(tmp);
            } else if (ext === '.png') {
              await img.png({ compressionLevel: 9, palette: true }).toFile(tmp);
            } else {
              return; // skip others
            }

            // Only replace if tmp is smaller (avoid churn)
            const [a, b] = await Promise.all([fs.stat(src), fs.stat(tmp)]);
            if (b.size < a.size) {
              await fs.rename(tmp, src);
              changed = 1;
            } else {
              await fs.rm(tmp, { force: true });
            }
          };

          const genVariant = async (src, w, format) => {
            const dir = path.dirname(src);
            const name = path.basename(src, path.extname(src));
            const out = path.join(dir, `${name}-${w}.${format}`);

            if (await exists(out)) return;

            const base = sharp(src, { failOn: 'none' }).resize({ width: w, withoutEnlargement: true });

            if (format === 'webp') {
              await base.webp({ quality: 80, effort: 4 }).toFile(out);
            } else if (format === 'avif') {
              await base.avif({ quality: 50, effort: 4 }).toFile(out);
            }
            changed = 1;
          };

          const patterns = [];
          for (const d of IMAGE_DIRS) {
            patterns.push(`${d.replace(/\/+$/,'')}/**/*.{jpg,jpeg,png,JPG,JPEG,PNG}`);
          }

          const files = await globby(patterns, { dot: false, onlyFiles: true });
          if (!files.length) {
            console.log('No images found.');
          }

          for (const src of files) {
            console.log('Processing:', src);
            try {
              await recompressOriginal(src);
              for (const w of SIZES) {
                await Promise.all([
                  genVariant(src, w, 'webp'),
                  genVariant(src, w, 'avif'),
                ]);
              }
            } catch (err) {
              console.error('Error on', src, err);
            }
          }

          // Report back to GitHub Actions
          console.log('changed='+changed);
          await fs.appendFile(process.env.GITHUB_OUTPUT, `changed=${changed}\n`);
          NODE

      - name: Commit optimized images
        if: steps.optimize.outputs.changed == '1'
        uses: EndBug/add-and-commit@v9
        with:
          add: "."
          message: "chore(images): optimize & generate responsive variants [skip ci]"
          default_author: github_actions
